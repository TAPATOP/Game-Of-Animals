Проектът е написан на Haskell и използва опростена версия на "Дърво на решенията"(Decision Tree) за да складира въпросите за откриване на животното, където листата са самите животни.

В началото на програмата се зарежда файлът "db.txt", в който е складирана информацията във формата на дърво, като всеки ред има префикс "Q:"( question) или "A:"( answer) в зависимост какво е записано на него. Заредения низ се разделя по редове, които служат за построяване на самото дърво.

Следва подаване на дървото на функцията play, в която е имплементирана логиката, свързана с пускането на играта наново(т.е. няма нужда да се започва нова игра след всяко отгатнато животно, а може директно да се играе върху полученото дърво). Когато този цикъл приключи, функцията връща ново дърво( тъй като то може да се е изменило по време на игра) и това ново дърво бива записано във временен файл( "bd_temp.txt"). Ако записването мине без произтичане на грешка, временния файл заменя оригиналния.

Трябва да се обърне внимание, че има конкретен формат, в който се записват данните, т.е. ако някой ред не започва с правилния префикс, играта ще върне грешка.

Поддържат се повече от един валидни отговори: ["y", "yes", "ye"] за "да" и ["n", "no"]. Те, разбира се, могат лесно да бъдат разширени.

Условие на проекта:
Да се напише интерактивна и самообучаваща се програма, която играе с потребителя т.нар. „Игра на животни“. Играта протича по следния начин: всеки път, когато потребителят си намисли животно, програмата започва да задава въпроси за него. На всеки въпрос потребителят може да отговаря само с “да” или “не”. След всеки един отговор от потребителя програмата може да зададе нов въпрос или да направи директно предположение от типа “Куче ли е?”.
В случай, че програмата е отгатнала правилно намисленото животно (т.е. отговорът на предположението е бил положителен), играта приключва и може да бъде започната нова. Ако отговорът е бил отрицателен , то тя е задължена да попита какво е било то, а потребителят е задължен да отговори коректно. След това програмата трябва да зададе няколко допълнителни въпроса, за да „научи“ как може да различава новото животно от това, което е предположила (вж. примера накрая). Тогава програмата трябва да добави новото животно и характеристиките, които е научила за него, в базата със знания. При следващата игра програмата вече ще разполага с по-широк набор от знания – и за различни животни, и за техните характеристики. Допуска се възможността ако програмата не знае какво да попита или отгатне, да се предаде и да помоли потребителя да въведе намисленото животно.
Ще приемаме, че в началото базата от данни се състои от няколко животни, като например куче, котка, папагал и златна рибка. Тази база, естествено, ще се разширява с течение на времето. Програмата също ще разполага поначало с множество въпроси, отнасящи се до животните. Примерни такива въпроси са “Два крака ли има?”, “Птица ли е?”, “Лети ли?”, “Топлокръвно ли е?” и други, следователно отговорите им могат да бъдат само булеви стойности – конкретно, низовете “да” и “не”. Колкото повече въпроси са имплементирани в началното състояние на програмата, толкова по-умело ще може тя да ги задава и да достига до верен отговор. Тези въпроси трябва да бъдат фиксирани и кодирани от програмиста, докато с течение на времето може да бъдат допълвани. Не е изискване във всеки един момент програмата да знае всички характеристики за всички животни.
Въпросите трябва да бъдат задавани и отговаряни чрез стандартните функции за вход и изход в съответния език за програмиране. Четенето на базата със знания от файл не е задължително условие за проекта, но ще бъде поощрено с бонус. Един вариант за имплементация е всички последователни игри да бъдат изиграни в рамките на едно стартиране на програмата, на принципа на итерацията, за да може да се реализира постепенното обогатяване на знанията. Ако базата със знания се направи перманентна, което е възможно с употребата на мутиращи операции и/или презаписване на базата със знания във файл, то всяка отделна игра ще е наистина самостоятелна и ще може да бъде реализирана с отделни извиквания на функцията за игра. Тогава бонусът към проекта ще бъде още по-голям.
Основните изисквания към проекта са две: последователното задаване на въпроси с цел смаляване на множеството от възможни отговори и обогатяването на знанията при грешно предположение. Всякакви допълнения към функционалността и методите на програмата са позволени, дори е позволено програмата да не работи по точно този алгоритъм (при желание на студента), но е задължително да спазва гореспоменатите две изисквания.
Примерна игра, в която програмата не познава намисленото животно и задава допълнителни въпроси, за да го различи с другите животни. На въпроса “Как мога да различа X и Y?” потребителят е задължен да отговори с въпрос - той може да присъства вече в базата с въпроси, а може и да е чисто нов.
 
 “Топлокръвно ли е?”
>  “да”
 “Птица ли е?”
>  “да”
 “Гълъб ли е?”
>  “не”
 “Предавам се, какъв е отговорът?”
>  “Щраус”
 “Как мога да различа Гълъб и Щраус?”
>  “Голямо ли е?”
 “Кое от двете отговаря с “да” на този въпрос?”
>  “Щраус”
 “Благодаря, записвам.”
